// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TextFieldGroup component should render any error message correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TextFieldGroup
    error="An error has occured"
    name="test"
    onChange={[MockFunction]}
    type="text"
    value="test"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <input
          className="input-box"
          name="test"
          onChange={[MockFunction]}
          type="text"
          value="test"
        />,
        undefined,
        <div
          className="invalid-feedback"
        >
          An error has occured
        </div>,
      ],
      "className": "form-group",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "input-box",
          "disabled": undefined,
          "name": "test",
          "onChange": [MockFunction],
          "placeholder": undefined,
          "type": "text",
          "value": "test",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
      undefined,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "An error has occured",
          "className": "invalid-feedback",
        },
        "ref": null,
        "rendered": "An error has occured",
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <input
            className="input-box"
            name="test"
            onChange={[MockFunction]}
            type="text"
            value="test"
          />,
          undefined,
          <div
            className="invalid-feedback"
          >
            An error has occured
          </div>,
        ],
        "className": "form-group",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "input-box",
            "disabled": undefined,
            "name": "test",
            "onChange": [MockFunction],
            "placeholder": undefined,
            "type": "text",
            "value": "test",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        undefined,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "An error has occured",
            "className": "invalid-feedback",
          },
          "ref": null,
          "rendered": "An error has occured",
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`TextFieldGroup component should render any information message correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TextFieldGroup
    info="info is available"
    name="test"
    onChange={[MockFunction]}
    type="text"
    value="test"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <input
          className="input-box"
          name="test"
          onChange={[MockFunction]}
          type="text"
          value="test"
        />,
        <small
          className="form-text text-muted"
        >
          info is available
        </small>,
        undefined,
      ],
      "className": "form-group",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "input-box",
          "disabled": undefined,
          "name": "test",
          "onChange": [MockFunction],
          "placeholder": undefined,
          "type": "text",
          "value": "test",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "info is available",
          "className": "form-text text-muted",
        },
        "ref": null,
        "rendered": "info is available",
        "type": "small",
      },
      undefined,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <input
            className="input-box"
            name="test"
            onChange={[MockFunction]}
            type="text"
            value="test"
          />,
          <small
            className="form-text text-muted"
          >
            info is available
          </small>,
          undefined,
        ],
        "className": "form-group",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "input-box",
            "disabled": undefined,
            "name": "test",
            "onChange": [MockFunction],
            "placeholder": undefined,
            "type": "text",
            "value": "test",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "info is available",
            "className": "form-text text-muted",
          },
          "ref": null,
          "rendered": "info is available",
          "type": "small",
        },
        undefined,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`TextFieldGroup component should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TextFieldGroup
    name="test"
    onChange={[MockFunction]}
    type="text"
    value="test"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <input
          className="input-box"
          name="test"
          onChange={[MockFunction]}
          type="text"
          value="test"
        />,
        undefined,
        undefined,
      ],
      "className": "form-group",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "input-box",
          "disabled": undefined,
          "name": "test",
          "onChange": [MockFunction],
          "placeholder": undefined,
          "type": "text",
          "value": "test",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
      undefined,
      undefined,
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <input
            className="input-box"
            name="test"
            onChange={[MockFunction]}
            type="text"
            value="test"
          />,
          undefined,
          undefined,
        ],
        "className": "form-group",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "input-box",
            "disabled": undefined,
            "name": "test",
            "onChange": [MockFunction],
            "placeholder": undefined,
            "type": "text",
            "value": "test",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        undefined,
        undefined,
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
