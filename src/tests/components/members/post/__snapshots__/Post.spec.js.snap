// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Comment Feed Component should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Post
    getPost={
      [MockFunction] {
        "calls": Array [
          Array [
            undefined,
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    match={
      Object {
        "params": [MockFunction],
      }
    }
    post={
      Object {
        "loading": false,
        "post": [MockFunction],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="back-to-feed"
        >
          <Link
            className="button-small button-warning"
            replace={false}
            to="/feed"
          >
            Back To Feed
          </Link>
        </div>,
        <div>
          <Connect(PostItem)
            post={[MockFunction]}
            showActions={false}
          />
          <Connect(CommentForm) />
          <commentFeed />
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Link
            className="button-small button-warning"
            replace={false}
            to="/feed"
          >
            Back To Feed
          </Link>,
          "className": "back-to-feed",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Back To Feed",
            "className": "button-small button-warning",
            "replace": false,
            "to": "/feed",
          },
          "ref": null,
          "rendered": "Back To Feed",
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Connect(PostItem)
              post={[MockFunction]}
              showActions={false}
            />,
            <Connect(CommentForm) />,
            <commentFeed />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "post": [MockFunction],
              "showActions": false,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "postId": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "comments": undefined,
              "postId": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="back-to-feed"
          >
            <Link
              className="button-small button-warning"
              replace={false}
              to="/feed"
            >
              Back To Feed
            </Link>
          </div>,
          <div>
            <Connect(PostItem)
              post={[MockFunction]}
              showActions={false}
            />
            <Connect(CommentForm) />
            <commentFeed />
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Link
              className="button-small button-warning"
              replace={false}
              to="/feed"
            >
              Back To Feed
            </Link>,
            "className": "back-to-feed",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Back To Feed",
              "className": "button-small button-warning",
              "replace": false,
              "to": "/feed",
            },
            "ref": null,
            "rendered": "Back To Feed",
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Connect(PostItem)
                post={[MockFunction]}
                showActions={false}
              />,
              <Connect(CommentForm) />,
              <commentFeed />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "post": [MockFunction],
                "showActions": false,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "postId": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "comments": undefined,
                "postId": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
