// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Member Photos should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MemberPhoto
    getMemberUploads={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    onUploadDelete={[MockFunction]}
    uploads={
      Object {
        "loading": false,
        "uploads": Array [
          Object {
            "_id": "5bfed7528032901512c0f933",
            "date": 0,
            "description": "Kendo Photo Details",
            "filename": "image-1543168184113.png",
            "title": "Title1",
          },
          Object {
            "_id": "5bfed7528036661512c0f933",
            "date": -345600000,
            "description": "More Details",
            "filename": "image-0000000000.png",
            "title": "Title2",
          },
          Object {
            "_id": "5bfed7528032901512c05rtd",
            "date": 126234000000,
            "description": "Extra Details",
            "filename": "image-3333333333.png",
            "title": "Title3",
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="images-uploads content-container"
      >
        <h1
          className="image-title"
        >
          Member Photographs
        </h1>
        <Connect(MembersPhotoFilter) />
        <div
          className="wrap-collapsible"
        >
          <input
            className="toggle-upload"
            id="collapsible-upload"
            type="checkbox"
          />
          <label
            className="lbl-toggle-upload"
            htmlFor="collapsible-upload"
          >
            Uploads
          </label>
          <div
            className="collapsible-content-upload"
          >
            <div
              className="content-inner"
            >
              <form
                className="image-header"
                onSubmit={[Function]}
              >
                <div
                  className="image-header-container"
                >
                  <label
                    className="upload-file button-small"
                    htmlFor="upload-file"
                  >
                    Get Photo
                  </label>
                  <input
                    accept=".jpg,.jpeg,.png,.bmp,.gif"
                    id="upload-file"
                    name="image"
                    onChange={[Function]}
                    type="file"
                  />
                </div>
                <div
                  className="image-header-container"
                >
                  <input
                    className="upload-title input-box"
                    name="title"
                    onChange={[Function]}
                    placeholder="Title"
                    type="text"
                    value=""
                  />
                </div>
                <withStyles(SingleDatePicker)
                  anchorDirection="left"
                  appendToBody={false}
                  block={false}
                  calendarInfoPosition="bottom"
                  customCloseIcon={null}
                  customInputIcon={null}
                  date={"1970-01-01T00:00:00.000Z"}
                  daySize={39}
                  disableScroll={false}
                  disabled={false}
                  displayFormat={[Function]}
                  enableOutsideDays={false}
                  firstDayOfWeek={null}
                  focused={false}
                  hideKeyboardShortcutsPanel={false}
                  horizontalMargin={0}
                  horizontalMonthPadding={13}
                  id="date"
                  initialVisibleMonth={null}
                  inputIconPosition="before"
                  isDayBlocked={[Function]}
                  isDayHighlighted={[Function]}
                  isOutsideRange={[Function]}
                  isRTL={false}
                  keepFocusOnInput={false}
                  keepOpenOnDateSelect={false}
                  monthFormat="MMMM YYYY"
                  navNext={null}
                  navPrev={null}
                  noBorder={false}
                  numberOfMonths={1}
                  onClose={[Function]}
                  onDateChange={[Function]}
                  onFocusChange={[Function]}
                  onNextMonthClick={[Function]}
                  onPrevMonthClick={[Function]}
                  openDirection="down"
                  orientation="horizontal"
                  phrases={
                    Object {
                      "calendarLabel": "Calendar",
                      "chooseAvailableDate": [Function],
                      "clearDate": "Clear Date",
                      "closeDatePicker": "Close",
                      "dateIsSelected": [Function],
                      "dateIsUnavailable": [Function],
                      "enterKey": "Enter key",
                      "escape": "Escape key",
                      "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
                      "homeEnd": "Home and end keys",
                      "jumpToNextMonth": "Move forward to switch to the next month.",
                      "jumpToPrevMonth": "Move backward to switch to the previous month.",
                      "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
                      "keyboardShortcuts": "Keyboard Shortcuts",
                      "leftArrowRightArrow": "Right and left arrow keys",
                      "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
                      "moveFocusByOneMonth": "Switch months.",
                      "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
                      "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
                      "openThisPanel": "Open this panel.",
                      "pageUpPageDown": "page up and page down keys",
                      "questionMark": "Question mark",
                      "returnFocusToInput": "Return to the date input field.",
                      "selectFocusedDate": "Select the date in focus.",
                      "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
                      "upArrowDownArrow": "up and down arrow keys",
                    }
                  }
                  placeholder="Event Date"
                  readOnly={false}
                  regular={false}
                  renderCalendarInfo={null}
                  renderDayContents={null}
                  renderMonthElement={null}
                  renderMonthText={null}
                  reopenPickerOnClearDate={false}
                  required={false}
                  screenReaderInputMessage=""
                  showClearDate={false}
                  showDefaultInputIcon={false}
                  small={false}
                  verticalHeight={null}
                  verticalSpacing={22}
                  weekDayFormat="dd"
                  withFullScreenPortal={false}
                  withPortal={false}
                />
                <div
                  className="image-header-container"
                >
                  <textarea
                    className="upload-text input-box"
                    col="2"
                    name="description"
                    onChange={[Function]}
                    placeholder="Enter Description"
                    rows="21"
                    type="text"
                    value=""
                  />
                </div>
                <div
                  className="button-end-container"
                >
                  <div
                    className="image-header-container"
                  >
                    <input
                      className="button-small"
                      name="submit"
                      type="submit"
                      value="Upload Photo"
                    />
                  </div>
                </div>
              </form>
            </div>
          </div>
          <div
            className="image-container"
          >
            <MemberPhotoItem
              date={0}
              description="Kendo Photo Details"
              filename="image-1543168184113.png"
              onUploadDelete={[Function]}
              title="Title1"
            />
            <MemberPhotoItem
              date={-345600000}
              description="More Details"
              filename="image-0000000000.png"
              onUploadDelete={[Function]}
              title="Title2"
            />
            <MemberPhotoItem
              date={126234000000}
              description="Extra Details"
              filename="image-3333333333.png"
              onUploadDelete={[Function]}
              title="Title3"
            />
          </div>
          <PaginationBoxView
            activeClassName="active"
            breakLabel={
              <span
                className="gap"
              >
                ...
              </span>
            }
            containerClassName="pagination"
            disableInitialCallback={false}
            disabledClassName="disabled"
            forcePage={0}
            initialPage={0}
            marginPagesDisplayed={3}
            nextClassName="next"
            nextLabel="Next →"
            nextLinkClassName="next_page"
            onPageChange={[Function]}
            pageCount={1}
            pageRangeDisplayed={2}
            previousClassName="previous"
            previousLabel="← Prev"
            previousLinkClassName="previous_page"
          />
        </div>
      </div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1
            className="image-title"
          >
            Member Photographs
          </h1>,
          <Connect(MembersPhotoFilter) />,
          <div
            className="wrap-collapsible"
          >
            <input
              className="toggle-upload"
              id="collapsible-upload"
              type="checkbox"
            />
            <label
              className="lbl-toggle-upload"
              htmlFor="collapsible-upload"
            >
              Uploads
            </label>
            <div
              className="collapsible-content-upload"
            >
              <div
                className="content-inner"
              >
                <form
                  className="image-header"
                  onSubmit={[Function]}
                >
                  <div
                    className="image-header-container"
                  >
                    <label
                      className="upload-file button-small"
                      htmlFor="upload-file"
                    >
                      Get Photo
                    </label>
                    <input
                      accept=".jpg,.jpeg,.png,.bmp,.gif"
                      id="upload-file"
                      name="image"
                      onChange={[Function]}
                      type="file"
                    />
                  </div>
                  <div
                    className="image-header-container"
                  >
                    <input
                      className="upload-title input-box"
                      name="title"
                      onChange={[Function]}
                      placeholder="Title"
                      type="text"
                      value=""
                    />
                  </div>
                  <withStyles(SingleDatePicker)
                    anchorDirection="left"
                    appendToBody={false}
                    block={false}
                    calendarInfoPosition="bottom"
                    customCloseIcon={null}
                    customInputIcon={null}
                    date={"1970-01-01T00:00:00.000Z"}
                    daySize={39}
                    disableScroll={false}
                    disabled={false}
                    displayFormat={[Function]}
                    enableOutsideDays={false}
                    firstDayOfWeek={null}
                    focused={false}
                    hideKeyboardShortcutsPanel={false}
                    horizontalMargin={0}
                    horizontalMonthPadding={13}
                    id="date"
                    initialVisibleMonth={null}
                    inputIconPosition="before"
                    isDayBlocked={[Function]}
                    isDayHighlighted={[Function]}
                    isOutsideRange={[Function]}
                    isRTL={false}
                    keepFocusOnInput={false}
                    keepOpenOnDateSelect={false}
                    monthFormat="MMMM YYYY"
                    navNext={null}
                    navPrev={null}
                    noBorder={false}
                    numberOfMonths={1}
                    onClose={[Function]}
                    onDateChange={[Function]}
                    onFocusChange={[Function]}
                    onNextMonthClick={[Function]}
                    onPrevMonthClick={[Function]}
                    openDirection="down"
                    orientation="horizontal"
                    phrases={
                      Object {
                        "calendarLabel": "Calendar",
                        "chooseAvailableDate": [Function],
                        "clearDate": "Clear Date",
                        "closeDatePicker": "Close",
                        "dateIsSelected": [Function],
                        "dateIsUnavailable": [Function],
                        "enterKey": "Enter key",
                        "escape": "Escape key",
                        "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
                        "homeEnd": "Home and end keys",
                        "jumpToNextMonth": "Move forward to switch to the next month.",
                        "jumpToPrevMonth": "Move backward to switch to the previous month.",
                        "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
                        "keyboardShortcuts": "Keyboard Shortcuts",
                        "leftArrowRightArrow": "Right and left arrow keys",
                        "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
                        "moveFocusByOneMonth": "Switch months.",
                        "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
                        "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
                        "openThisPanel": "Open this panel.",
                        "pageUpPageDown": "page up and page down keys",
                        "questionMark": "Question mark",
                        "returnFocusToInput": "Return to the date input field.",
                        "selectFocusedDate": "Select the date in focus.",
                        "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
                        "upArrowDownArrow": "up and down arrow keys",
                      }
                    }
                    placeholder="Event Date"
                    readOnly={false}
                    regular={false}
                    renderCalendarInfo={null}
                    renderDayContents={null}
                    renderMonthElement={null}
                    renderMonthText={null}
                    reopenPickerOnClearDate={false}
                    required={false}
                    screenReaderInputMessage=""
                    showClearDate={false}
                    showDefaultInputIcon={false}
                    small={false}
                    verticalHeight={null}
                    verticalSpacing={22}
                    weekDayFormat="dd"
                    withFullScreenPortal={false}
                    withPortal={false}
                  />
                  <div
                    className="image-header-container"
                  >
                    <textarea
                      className="upload-text input-box"
                      col="2"
                      name="description"
                      onChange={[Function]}
                      placeholder="Enter Description"
                      rows="21"
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    className="button-end-container"
                  >
                    <div
                      className="image-header-container"
                    >
                      <input
                        className="button-small"
                        name="submit"
                        type="submit"
                        value="Upload Photo"
                      />
                    </div>
                  </div>
                </form>
              </div>
            </div>
            <div
              className="image-container"
            >
              <MemberPhotoItem
                date={0}
                description="Kendo Photo Details"
                filename="image-1543168184113.png"
                onUploadDelete={[Function]}
                title="Title1"
              />
              <MemberPhotoItem
                date={-345600000}
                description="More Details"
                filename="image-0000000000.png"
                onUploadDelete={[Function]}
                title="Title2"
              />
              <MemberPhotoItem
                date={126234000000}
                description="Extra Details"
                filename="image-3333333333.png"
                onUploadDelete={[Function]}
                title="Title3"
              />
            </div>
            <PaginationBoxView
              activeClassName="active"
              breakLabel={
                <span
                  className="gap"
                >
                  ...
                </span>
              }
              containerClassName="pagination"
              disableInitialCallback={false}
              disabledClassName="disabled"
              forcePage={0}
              initialPage={0}
              marginPagesDisplayed={3}
              nextClassName="next"
              nextLabel="Next →"
              nextLinkClassName="next_page"
              onPageChange={[Function]}
              pageCount={1}
              pageRangeDisplayed={2}
              previousClassName="previous"
              previousLabel="← Prev"
              previousLinkClassName="previous_page"
            />
          </div>,
        ],
        "className": "images-uploads content-container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Member Photographs",
            "className": "image-title",
          },
          "ref": null,
          "rendered": "Member Photographs",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <input
                className="toggle-upload"
                id="collapsible-upload"
                type="checkbox"
              />,
              <label
                className="lbl-toggle-upload"
                htmlFor="collapsible-upload"
              >
                Uploads
              </label>,
              <div
                className="collapsible-content-upload"
              >
                <div
                  className="content-inner"
                >
                  <form
                    className="image-header"
                    onSubmit={[Function]}
                  >
                    <div
                      className="image-header-container"
                    >
                      <label
                        className="upload-file button-small"
                        htmlFor="upload-file"
                      >
                        Get Photo
                      </label>
                      <input
                        accept=".jpg,.jpeg,.png,.bmp,.gif"
                        id="upload-file"
                        name="image"
                        onChange={[Function]}
                        type="file"
                      />
                    </div>
                    <div
                      className="image-header-container"
                    >
                      <input
                        className="upload-title input-box"
                        name="title"
                        onChange={[Function]}
                        placeholder="Title"
                        type="text"
                        value=""
                      />
                    </div>
                    <withStyles(SingleDatePicker)
                      anchorDirection="left"
                      appendToBody={false}
                      block={false}
                      calendarInfoPosition="bottom"
                      customCloseIcon={null}
                      customInputIcon={null}
                      date={"1970-01-01T00:00:00.000Z"}
                      daySize={39}
                      disableScroll={false}
                      disabled={false}
                      displayFormat={[Function]}
                      enableOutsideDays={false}
                      firstDayOfWeek={null}
                      focused={false}
                      hideKeyboardShortcutsPanel={false}
                      horizontalMargin={0}
                      horizontalMonthPadding={13}
                      id="date"
                      initialVisibleMonth={null}
                      inputIconPosition="before"
                      isDayBlocked={[Function]}
                      isDayHighlighted={[Function]}
                      isOutsideRange={[Function]}
                      isRTL={false}
                      keepFocusOnInput={false}
                      keepOpenOnDateSelect={false}
                      monthFormat="MMMM YYYY"
                      navNext={null}
                      navPrev={null}
                      noBorder={false}
                      numberOfMonths={1}
                      onClose={[Function]}
                      onDateChange={[Function]}
                      onFocusChange={[Function]}
                      onNextMonthClick={[Function]}
                      onPrevMonthClick={[Function]}
                      openDirection="down"
                      orientation="horizontal"
                      phrases={
                        Object {
                          "calendarLabel": "Calendar",
                          "chooseAvailableDate": [Function],
                          "clearDate": "Clear Date",
                          "closeDatePicker": "Close",
                          "dateIsSelected": [Function],
                          "dateIsUnavailable": [Function],
                          "enterKey": "Enter key",
                          "escape": "Escape key",
                          "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
                          "homeEnd": "Home and end keys",
                          "jumpToNextMonth": "Move forward to switch to the next month.",
                          "jumpToPrevMonth": "Move backward to switch to the previous month.",
                          "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
                          "keyboardShortcuts": "Keyboard Shortcuts",
                          "leftArrowRightArrow": "Right and left arrow keys",
                          "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
                          "moveFocusByOneMonth": "Switch months.",
                          "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
                          "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
                          "openThisPanel": "Open this panel.",
                          "pageUpPageDown": "page up and page down keys",
                          "questionMark": "Question mark",
                          "returnFocusToInput": "Return to the date input field.",
                          "selectFocusedDate": "Select the date in focus.",
                          "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
                          "upArrowDownArrow": "up and down arrow keys",
                        }
                      }
                      placeholder="Event Date"
                      readOnly={false}
                      regular={false}
                      renderCalendarInfo={null}
                      renderDayContents={null}
                      renderMonthElement={null}
                      renderMonthText={null}
                      reopenPickerOnClearDate={false}
                      required={false}
                      screenReaderInputMessage=""
                      showClearDate={false}
                      showDefaultInputIcon={false}
                      small={false}
                      verticalHeight={null}
                      verticalSpacing={22}
                      weekDayFormat="dd"
                      withFullScreenPortal={false}
                      withPortal={false}
                    />
                    <div
                      className="image-header-container"
                    >
                      <textarea
                        className="upload-text input-box"
                        col="2"
                        name="description"
                        onChange={[Function]}
                        placeholder="Enter Description"
                        rows="21"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="button-end-container"
                    >
                      <div
                        className="image-header-container"
                      >
                        <input
                          className="button-small"
                          name="submit"
                          type="submit"
                          value="Upload Photo"
                        />
                      </div>
                    </div>
                  </form>
                </div>
              </div>,
              <div
                className="image-container"
              >
                <MemberPhotoItem
                  date={0}
                  description="Kendo Photo Details"
                  filename="image-1543168184113.png"
                  onUploadDelete={[Function]}
                  title="Title1"
                />
                <MemberPhotoItem
                  date={-345600000}
                  description="More Details"
                  filename="image-0000000000.png"
                  onUploadDelete={[Function]}
                  title="Title2"
                />
                <MemberPhotoItem
                  date={126234000000}
                  description="Extra Details"
                  filename="image-3333333333.png"
                  onUploadDelete={[Function]}
                  title="Title3"
                />
              </div>,
              <PaginationBoxView
                activeClassName="active"
                breakLabel={
                  <span
                    className="gap"
                  >
                    ...
                  </span>
                }
                containerClassName="pagination"
                disableInitialCallback={false}
                disabledClassName="disabled"
                forcePage={0}
                initialPage={0}
                marginPagesDisplayed={3}
                nextClassName="next"
                nextLabel="Next →"
                nextLinkClassName="next_page"
                onPageChange={[Function]}
                pageCount={1}
                pageRangeDisplayed={2}
                previousClassName="previous"
                previousLabel="← Prev"
                previousLinkClassName="previous_page"
              />,
            ],
            "className": "wrap-collapsible",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "toggle-upload",
                "id": "collapsible-upload",
                "type": "checkbox",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Uploads",
                "className": "lbl-toggle-upload",
                "htmlFor": "collapsible-upload",
              },
              "ref": null,
              "rendered": "Uploads",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <div
                  className="content-inner"
                >
                  <form
                    className="image-header"
                    onSubmit={[Function]}
                  >
                    <div
                      className="image-header-container"
                    >
                      <label
                        className="upload-file button-small"
                        htmlFor="upload-file"
                      >
                        Get Photo
                      </label>
                      <input
                        accept=".jpg,.jpeg,.png,.bmp,.gif"
                        id="upload-file"
                        name="image"
                        onChange={[Function]}
                        type="file"
                      />
                    </div>
                    <div
                      className="image-header-container"
                    >
                      <input
                        className="upload-title input-box"
                        name="title"
                        onChange={[Function]}
                        placeholder="Title"
                        type="text"
                        value=""
                      />
                    </div>
                    <withStyles(SingleDatePicker)
                      anchorDirection="left"
                      appendToBody={false}
                      block={false}
                      calendarInfoPosition="bottom"
                      customCloseIcon={null}
                      customInputIcon={null}
                      date={"1970-01-01T00:00:00.000Z"}
                      daySize={39}
                      disableScroll={false}
                      disabled={false}
                      displayFormat={[Function]}
                      enableOutsideDays={false}
                      firstDayOfWeek={null}
                      focused={false}
                      hideKeyboardShortcutsPanel={false}
                      horizontalMargin={0}
                      horizontalMonthPadding={13}
                      id="date"
                      initialVisibleMonth={null}
                      inputIconPosition="before"
                      isDayBlocked={[Function]}
                      isDayHighlighted={[Function]}
                      isOutsideRange={[Function]}
                      isRTL={false}
                      keepFocusOnInput={false}
                      keepOpenOnDateSelect={false}
                      monthFormat="MMMM YYYY"
                      navNext={null}
                      navPrev={null}
                      noBorder={false}
                      numberOfMonths={1}
                      onClose={[Function]}
                      onDateChange={[Function]}
                      onFocusChange={[Function]}
                      onNextMonthClick={[Function]}
                      onPrevMonthClick={[Function]}
                      openDirection="down"
                      orientation="horizontal"
                      phrases={
                        Object {
                          "calendarLabel": "Calendar",
                          "chooseAvailableDate": [Function],
                          "clearDate": "Clear Date",
                          "closeDatePicker": "Close",
                          "dateIsSelected": [Function],
                          "dateIsUnavailable": [Function],
                          "enterKey": "Enter key",
                          "escape": "Escape key",
                          "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
                          "homeEnd": "Home and end keys",
                          "jumpToNextMonth": "Move forward to switch to the next month.",
                          "jumpToPrevMonth": "Move backward to switch to the previous month.",
                          "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
                          "keyboardShortcuts": "Keyboard Shortcuts",
                          "leftArrowRightArrow": "Right and left arrow keys",
                          "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
                          "moveFocusByOneMonth": "Switch months.",
                          "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
                          "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
                          "openThisPanel": "Open this panel.",
                          "pageUpPageDown": "page up and page down keys",
                          "questionMark": "Question mark",
                          "returnFocusToInput": "Return to the date input field.",
                          "selectFocusedDate": "Select the date in focus.",
                          "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
                          "upArrowDownArrow": "up and down arrow keys",
                        }
                      }
                      placeholder="Event Date"
                      readOnly={false}
                      regular={false}
                      renderCalendarInfo={null}
                      renderDayContents={null}
                      renderMonthElement={null}
                      renderMonthText={null}
                      reopenPickerOnClearDate={false}
                      required={false}
                      screenReaderInputMessage=""
                      showClearDate={false}
                      showDefaultInputIcon={false}
                      small={false}
                      verticalHeight={null}
                      verticalSpacing={22}
                      weekDayFormat="dd"
                      withFullScreenPortal={false}
                      withPortal={false}
                    />
                    <div
                      className="image-header-container"
                    >
                      <textarea
                        className="upload-text input-box"
                        col="2"
                        name="description"
                        onChange={[Function]}
                        placeholder="Enter Description"
                        rows="21"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="button-end-container"
                    >
                      <div
                        className="image-header-container"
                      >
                        <input
                          className="button-small"
                          name="submit"
                          type="submit"
                          value="Upload Photo"
                        />
                      </div>
                    </div>
                  </form>
                </div>,
                "className": "collapsible-content-upload",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <form
                    className="image-header"
                    onSubmit={[Function]}
                  >
                    <div
                      className="image-header-container"
                    >
                      <label
                        className="upload-file button-small"
                        htmlFor="upload-file"
                      >
                        Get Photo
                      </label>
                      <input
                        accept=".jpg,.jpeg,.png,.bmp,.gif"
                        id="upload-file"
                        name="image"
                        onChange={[Function]}
                        type="file"
                      />
                    </div>
                    <div
                      className="image-header-container"
                    >
                      <input
                        className="upload-title input-box"
                        name="title"
                        onChange={[Function]}
                        placeholder="Title"
                        type="text"
                        value=""
                      />
                    </div>
                    <withStyles(SingleDatePicker)
                      anchorDirection="left"
                      appendToBody={false}
                      block={false}
                      calendarInfoPosition="bottom"
                      customCloseIcon={null}
                      customInputIcon={null}
                      date={"1970-01-01T00:00:00.000Z"}
                      daySize={39}
                      disableScroll={false}
                      disabled={false}
                      displayFormat={[Function]}
                      enableOutsideDays={false}
                      firstDayOfWeek={null}
                      focused={false}
                      hideKeyboardShortcutsPanel={false}
                      horizontalMargin={0}
                      horizontalMonthPadding={13}
                      id="date"
                      initialVisibleMonth={null}
                      inputIconPosition="before"
                      isDayBlocked={[Function]}
                      isDayHighlighted={[Function]}
                      isOutsideRange={[Function]}
                      isRTL={false}
                      keepFocusOnInput={false}
                      keepOpenOnDateSelect={false}
                      monthFormat="MMMM YYYY"
                      navNext={null}
                      navPrev={null}
                      noBorder={false}
                      numberOfMonths={1}
                      onClose={[Function]}
                      onDateChange={[Function]}
                      onFocusChange={[Function]}
                      onNextMonthClick={[Function]}
                      onPrevMonthClick={[Function]}
                      openDirection="down"
                      orientation="horizontal"
                      phrases={
                        Object {
                          "calendarLabel": "Calendar",
                          "chooseAvailableDate": [Function],
                          "clearDate": "Clear Date",
                          "closeDatePicker": "Close",
                          "dateIsSelected": [Function],
                          "dateIsUnavailable": [Function],
                          "enterKey": "Enter key",
                          "escape": "Escape key",
                          "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
                          "homeEnd": "Home and end keys",
                          "jumpToNextMonth": "Move forward to switch to the next month.",
                          "jumpToPrevMonth": "Move backward to switch to the previous month.",
                          "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
                          "keyboardShortcuts": "Keyboard Shortcuts",
                          "leftArrowRightArrow": "Right and left arrow keys",
                          "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
                          "moveFocusByOneMonth": "Switch months.",
                          "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
                          "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
                          "openThisPanel": "Open this panel.",
                          "pageUpPageDown": "page up and page down keys",
                          "questionMark": "Question mark",
                          "returnFocusToInput": "Return to the date input field.",
                          "selectFocusedDate": "Select the date in focus.",
                          "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
                          "upArrowDownArrow": "up and down arrow keys",
                        }
                      }
                      placeholder="Event Date"
                      readOnly={false}
                      regular={false}
                      renderCalendarInfo={null}
                      renderDayContents={null}
                      renderMonthElement={null}
                      renderMonthText={null}
                      reopenPickerOnClearDate={false}
                      required={false}
                      screenReaderInputMessage=""
                      showClearDate={false}
                      showDefaultInputIcon={false}
                      small={false}
                      verticalHeight={null}
                      verticalSpacing={22}
                      weekDayFormat="dd"
                      withFullScreenPortal={false}
                      withPortal={false}
                    />
                    <div
                      className="image-header-container"
                    >
                      <textarea
                        className="upload-text input-box"
                        col="2"
                        name="description"
                        onChange={[Function]}
                        placeholder="Enter Description"
                        rows="21"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="button-end-container"
                    >
                      <div
                        className="image-header-container"
                      >
                        <input
                          className="button-small"
                          name="submit"
                          type="submit"
                          value="Upload Photo"
                        />
                      </div>
                    </div>
                  </form>,
                  "className": "content-inner",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <div
                        className="image-header-container"
                      >
                        <label
                          className="upload-file button-small"
                          htmlFor="upload-file"
                        >
                          Get Photo
                        </label>
                        <input
                          accept=".jpg,.jpeg,.png,.bmp,.gif"
                          id="upload-file"
                          name="image"
                          onChange={[Function]}
                          type="file"
                        />
                      </div>,
                      <div
                        className="image-header-container"
                      >
                        <input
                          className="upload-title input-box"
                          name="title"
                          onChange={[Function]}
                          placeholder="Title"
                          type="text"
                          value=""
                        />
                      </div>,
                      <withStyles(SingleDatePicker)
                        anchorDirection="left"
                        appendToBody={false}
                        block={false}
                        calendarInfoPosition="bottom"
                        customCloseIcon={null}
                        customInputIcon={null}
                        date={"1970-01-01T00:00:00.000Z"}
                        daySize={39}
                        disableScroll={false}
                        disabled={false}
                        displayFormat={[Function]}
                        enableOutsideDays={false}
                        firstDayOfWeek={null}
                        focused={false}
                        hideKeyboardShortcutsPanel={false}
                        horizontalMargin={0}
                        horizontalMonthPadding={13}
                        id="date"
                        initialVisibleMonth={null}
                        inputIconPosition="before"
                        isDayBlocked={[Function]}
                        isDayHighlighted={[Function]}
                        isOutsideRange={[Function]}
                        isRTL={false}
                        keepFocusOnInput={false}
                        keepOpenOnDateSelect={false}
                        monthFormat="MMMM YYYY"
                        navNext={null}
                        navPrev={null}
                        noBorder={false}
                        numberOfMonths={1}
                        onClose={[Function]}
                        onDateChange={[Function]}
                        onFocusChange={[Function]}
                        onNextMonthClick={[Function]}
                        onPrevMonthClick={[Function]}
                        openDirection="down"
                        orientation="horizontal"
                        phrases={
                          Object {
                            "calendarLabel": "Calendar",
                            "chooseAvailableDate": [Function],
                            "clearDate": "Clear Date",
                            "closeDatePicker": "Close",
                            "dateIsSelected": [Function],
                            "dateIsUnavailable": [Function],
                            "enterKey": "Enter key",
                            "escape": "Escape key",
                            "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
                            "homeEnd": "Home and end keys",
                            "jumpToNextMonth": "Move forward to switch to the next month.",
                            "jumpToPrevMonth": "Move backward to switch to the previous month.",
                            "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
                            "keyboardShortcuts": "Keyboard Shortcuts",
                            "leftArrowRightArrow": "Right and left arrow keys",
                            "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
                            "moveFocusByOneMonth": "Switch months.",
                            "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
                            "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
                            "openThisPanel": "Open this panel.",
                            "pageUpPageDown": "page up and page down keys",
                            "questionMark": "Question mark",
                            "returnFocusToInput": "Return to the date input field.",
                            "selectFocusedDate": "Select the date in focus.",
                            "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
                            "upArrowDownArrow": "up and down arrow keys",
                          }
                        }
                        placeholder="Event Date"
                        readOnly={false}
                        regular={false}
                        renderCalendarInfo={null}
                        renderDayContents={null}
                        renderMonthElement={null}
                        renderMonthText={null}
                        reopenPickerOnClearDate={false}
                        required={false}
                        screenReaderInputMessage=""
                        showClearDate={false}
                        showDefaultInputIcon={false}
                        small={false}
                        verticalHeight={null}
                        verticalSpacing={22}
                        weekDayFormat="dd"
                        withFullScreenPortal={false}
                        withPortal={false}
                      />,
                      <div
                        className="image-header-container"
                      >
                        <textarea
                          className="upload-text input-box"
                          col="2"
                          name="description"
                          onChange={[Function]}
                          placeholder="Enter Description"
                          rows="21"
                          type="text"
                          value=""
                        />
                      </div>,
                      <div
                        className="button-end-container"
                      >
                        <div
                          className="image-header-container"
                        >
                          <input
                            className="button-small"
                            name="submit"
                            type="submit"
                            value="Upload Photo"
                          />
                        </div>
                      </div>,
                    ],
                    "className": "image-header",
                    "onSubmit": [Function],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <label
                            className="upload-file button-small"
                            htmlFor="upload-file"
                          >
                            Get Photo
                          </label>,
                          <input
                            accept=".jpg,.jpeg,.png,.bmp,.gif"
                            id="upload-file"
                            name="image"
                            onChange={[Function]}
                            type="file"
                          />,
                        ],
                        "className": "image-header-container",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": "Get Photo",
                            "className": "upload-file button-small",
                            "htmlFor": "upload-file",
                          },
                          "ref": null,
                          "rendered": "Get Photo",
                          "type": "label",
                        },
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "accept": ".jpg,.jpeg,.png,.bmp,.gif",
                            "id": "upload-file",
                            "name": "image",
                            "onChange": [Function],
                            "type": "file",
                          },
                          "ref": null,
                          "rendered": null,
                          "type": "input",
                        },
                      ],
                      "type": "div",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <input
                          className="upload-title input-box"
                          name="title"
                          onChange={[Function]}
                          placeholder="Title"
                          type="text"
                          value=""
                        />,
                        "className": "image-header-container",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "upload-title input-box",
                          "name": "title",
                          "onChange": [Function],
                          "placeholder": "Title",
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "input",
                      },
                      "type": "div",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "anchorDirection": "left",
                        "appendToBody": false,
                        "block": false,
                        "calendarInfoPosition": "bottom",
                        "customCloseIcon": null,
                        "customInputIcon": null,
                        "date": "1970-01-01T00:00:00.000Z",
                        "dayAriaLabelFormat": undefined,
                        "daySize": 39,
                        "disableScroll": false,
                        "disabled": false,
                        "displayFormat": [Function],
                        "enableOutsideDays": false,
                        "firstDayOfWeek": null,
                        "focused": false,
                        "hideKeyboardShortcutsPanel": false,
                        "horizontalMargin": 0,
                        "horizontalMonthPadding": 13,
                        "id": "date",
                        "initialVisibleMonth": null,
                        "inputIconPosition": "before",
                        "isDayBlocked": [Function],
                        "isDayHighlighted": [Function],
                        "isOutsideRange": [Function],
                        "isRTL": false,
                        "keepFocusOnInput": false,
                        "keepOpenOnDateSelect": false,
                        "monthFormat": "MMMM YYYY",
                        "navNext": null,
                        "navPrev": null,
                        "noBorder": false,
                        "numberOfMonths": 1,
                        "onClose": [Function],
                        "onDateChange": [Function],
                        "onFocusChange": [Function],
                        "onNextMonthClick": [Function],
                        "onPrevMonthClick": [Function],
                        "openDirection": "down",
                        "orientation": "horizontal",
                        "phrases": Object {
                          "calendarLabel": "Calendar",
                          "chooseAvailableDate": [Function],
                          "clearDate": "Clear Date",
                          "closeDatePicker": "Close",
                          "dateIsSelected": [Function],
                          "dateIsUnavailable": [Function],
                          "enterKey": "Enter key",
                          "escape": "Escape key",
                          "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
                          "homeEnd": "Home and end keys",
                          "jumpToNextMonth": "Move forward to switch to the next month.",
                          "jumpToPrevMonth": "Move backward to switch to the previous month.",
                          "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
                          "keyboardShortcuts": "Keyboard Shortcuts",
                          "leftArrowRightArrow": "Right and left arrow keys",
                          "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
                          "moveFocusByOneMonth": "Switch months.",
                          "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
                          "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
                          "openThisPanel": "Open this panel.",
                          "pageUpPageDown": "page up and page down keys",
                          "questionMark": "Question mark",
                          "returnFocusToInput": "Return to the date input field.",
                          "selectFocusedDate": "Select the date in focus.",
                          "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
                          "upArrowDownArrow": "up and down arrow keys",
                        },
                        "placeholder": "Event Date",
                        "readOnly": false,
                        "regular": false,
                        "renderCalendarDay": undefined,
                        "renderCalendarInfo": null,
                        "renderDayContents": null,
                        "renderMonthElement": null,
                        "renderMonthText": null,
                        "reopenPickerOnClearDate": false,
                        "required": false,
                        "screenReaderInputMessage": "",
                        "showClearDate": false,
                        "showDefaultInputIcon": false,
                        "small": false,
                        "transitionDuration": undefined,
                        "verticalHeight": null,
                        "verticalSpacing": 22,
                        "weekDayFormat": "dd",
                        "withFullScreenPortal": false,
                        "withPortal": false,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <textarea
                          className="upload-text input-box"
                          col="2"
                          name="description"
                          onChange={[Function]}
                          placeholder="Enter Description"
                          rows="21"
                          type="text"
                          value=""
                        />,
                        "className": "image-header-container",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "className": "upload-text input-box",
                          "col": "2",
                          "name": "description",
                          "onChange": [Function],
                          "placeholder": "Enter Description",
                          "rows": "21",
                          "type": "text",
                          "value": "",
                        },
                        "ref": null,
                        "rendered": null,
                        "type": "textarea",
                      },
                      "type": "div",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <div
                          className="image-header-container"
                        >
                          <input
                            className="button-small"
                            name="submit"
                            type="submit"
                            value="Upload Photo"
                          />
                        </div>,
                        "className": "button-end-container",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": <input
                            className="button-small"
                            name="submit"
                            type="submit"
                            value="Upload Photo"
                          />,
                          "className": "image-header-container",
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "className": "button-small",
                            "name": "submit",
                            "type": "submit",
                            "value": "Upload Photo",
                          },
                          "ref": null,
                          "rendered": null,
                          "type": "input",
                        },
                        "type": "div",
                      },
                      "type": "div",
                    },
                  ],
                  "type": "form",
                },
                "type": "div",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <MemberPhotoItem
                    date={0}
                    description="Kendo Photo Details"
                    filename="image-1543168184113.png"
                    onUploadDelete={[Function]}
                    title="Title1"
                  />,
                  <MemberPhotoItem
                    date={-345600000}
                    description="More Details"
                    filename="image-0000000000.png"
                    onUploadDelete={[Function]}
                    title="Title2"
                  />,
                  <MemberPhotoItem
                    date={126234000000}
                    description="Extra Details"
                    filename="image-3333333333.png"
                    onUploadDelete={[Function]}
                    title="Title3"
                  />,
                ],
                "className": "image-container",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": "5bfed7528032901512c0f933",
                  "nodeType": "class",
                  "props": Object {
                    "date": 0,
                    "description": "Kendo Photo Details",
                    "eventDate": undefined,
                    "filename": "image-1543168184113.png",
                    "onUploadDelete": [Function],
                    "title": "Title1",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "5bfed7528036661512c0f933",
                  "nodeType": "class",
                  "props": Object {
                    "date": -345600000,
                    "description": "More Details",
                    "eventDate": undefined,
                    "filename": "image-0000000000.png",
                    "onUploadDelete": [Function],
                    "title": "Title2",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": "5bfed7528032901512c05rtd",
                  "nodeType": "class",
                  "props": Object {
                    "date": 126234000000,
                    "description": "Extra Details",
                    "eventDate": undefined,
                    "filename": "image-3333333333.png",
                    "onUploadDelete": [Function],
                    "title": "Title3",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "activeClassName": "active",
                "breakLabel": <span
                  className="gap"
                >
                  ...
                </span>,
                "containerClassName": "pagination",
                "disableInitialCallback": false,
                "disabledClassName": "disabled",
                "forcePage": 0,
                "initialPage": 0,
                "marginPagesDisplayed": 3,
                "nextClassName": "next",
                "nextLabel": "Next →",
                "nextLinkClassName": "next_page",
                "onPageChange": [Function],
                "pageCount": 1,
                "pageRangeDisplayed": 2,
                "previousClassName": "previous",
                "previousLabel": "← Prev",
                "previousLinkClassName": "previous_page",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="images-uploads content-container"
        >
          <h1
            className="image-title"
          >
            Member Photographs
          </h1>
          <Connect(MembersPhotoFilter) />
          <div
            className="wrap-collapsible"
          >
            <input
              className="toggle-upload"
              id="collapsible-upload"
              type="checkbox"
            />
            <label
              className="lbl-toggle-upload"
              htmlFor="collapsible-upload"
            >
              Uploads
            </label>
            <div
              className="collapsible-content-upload"
            >
              <div
                className="content-inner"
              >
                <form
                  className="image-header"
                  onSubmit={[Function]}
                >
                  <div
                    className="image-header-container"
                  >
                    <label
                      className="upload-file button-small"
                      htmlFor="upload-file"
                    >
                      Get Photo
                    </label>
                    <input
                      accept=".jpg,.jpeg,.png,.bmp,.gif"
                      id="upload-file"
                      name="image"
                      onChange={[Function]}
                      type="file"
                    />
                  </div>
                  <div
                    className="image-header-container"
                  >
                    <input
                      className="upload-title input-box"
                      name="title"
                      onChange={[Function]}
                      placeholder="Title"
                      type="text"
                      value=""
                    />
                  </div>
                  <withStyles(SingleDatePicker)
                    anchorDirection="left"
                    appendToBody={false}
                    block={false}
                    calendarInfoPosition="bottom"
                    customCloseIcon={null}
                    customInputIcon={null}
                    date={"1970-01-01T00:00:00.000Z"}
                    daySize={39}
                    disableScroll={false}
                    disabled={false}
                    displayFormat={[Function]}
                    enableOutsideDays={false}
                    firstDayOfWeek={null}
                    focused={false}
                    hideKeyboardShortcutsPanel={false}
                    horizontalMargin={0}
                    horizontalMonthPadding={13}
                    id="date"
                    initialVisibleMonth={null}
                    inputIconPosition="before"
                    isDayBlocked={[Function]}
                    isDayHighlighted={[Function]}
                    isOutsideRange={[Function]}
                    isRTL={false}
                    keepFocusOnInput={false}
                    keepOpenOnDateSelect={false}
                    monthFormat="MMMM YYYY"
                    navNext={null}
                    navPrev={null}
                    noBorder={false}
                    numberOfMonths={1}
                    onClose={[Function]}
                    onDateChange={[Function]}
                    onFocusChange={[Function]}
                    onNextMonthClick={[Function]}
                    onPrevMonthClick={[Function]}
                    openDirection="down"
                    orientation="horizontal"
                    phrases={
                      Object {
                        "calendarLabel": "Calendar",
                        "chooseAvailableDate": [Function],
                        "clearDate": "Clear Date",
                        "closeDatePicker": "Close",
                        "dateIsSelected": [Function],
                        "dateIsUnavailable": [Function],
                        "enterKey": "Enter key",
                        "escape": "Escape key",
                        "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
                        "homeEnd": "Home and end keys",
                        "jumpToNextMonth": "Move forward to switch to the next month.",
                        "jumpToPrevMonth": "Move backward to switch to the previous month.",
                        "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
                        "keyboardShortcuts": "Keyboard Shortcuts",
                        "leftArrowRightArrow": "Right and left arrow keys",
                        "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
                        "moveFocusByOneMonth": "Switch months.",
                        "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
                        "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
                        "openThisPanel": "Open this panel.",
                        "pageUpPageDown": "page up and page down keys",
                        "questionMark": "Question mark",
                        "returnFocusToInput": "Return to the date input field.",
                        "selectFocusedDate": "Select the date in focus.",
                        "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
                        "upArrowDownArrow": "up and down arrow keys",
                      }
                    }
                    placeholder="Event Date"
                    readOnly={false}
                    regular={false}
                    renderCalendarInfo={null}
                    renderDayContents={null}
                    renderMonthElement={null}
                    renderMonthText={null}
                    reopenPickerOnClearDate={false}
                    required={false}
                    screenReaderInputMessage=""
                    showClearDate={false}
                    showDefaultInputIcon={false}
                    small={false}
                    verticalHeight={null}
                    verticalSpacing={22}
                    weekDayFormat="dd"
                    withFullScreenPortal={false}
                    withPortal={false}
                  />
                  <div
                    className="image-header-container"
                  >
                    <textarea
                      className="upload-text input-box"
                      col="2"
                      name="description"
                      onChange={[Function]}
                      placeholder="Enter Description"
                      rows="21"
                      type="text"
                      value=""
                    />
                  </div>
                  <div
                    className="button-end-container"
                  >
                    <div
                      className="image-header-container"
                    >
                      <input
                        className="button-small"
                        name="submit"
                        type="submit"
                        value="Upload Photo"
                      />
                    </div>
                  </div>
                </form>
              </div>
            </div>
            <div
              className="image-container"
            >
              <MemberPhotoItem
                date={0}
                description="Kendo Photo Details"
                filename="image-1543168184113.png"
                onUploadDelete={[Function]}
                title="Title1"
              />
              <MemberPhotoItem
                date={-345600000}
                description="More Details"
                filename="image-0000000000.png"
                onUploadDelete={[Function]}
                title="Title2"
              />
              <MemberPhotoItem
                date={126234000000}
                description="Extra Details"
                filename="image-3333333333.png"
                onUploadDelete={[Function]}
                title="Title3"
              />
            </div>
            <PaginationBoxView
              activeClassName="active"
              breakLabel={
                <span
                  className="gap"
                >
                  ...
                </span>
              }
              containerClassName="pagination"
              disableInitialCallback={false}
              disabledClassName="disabled"
              forcePage={0}
              initialPage={0}
              marginPagesDisplayed={3}
              nextClassName="next"
              nextLabel="Next →"
              nextLinkClassName="next_page"
              onPageChange={[Function]}
              pageCount={1}
              pageRangeDisplayed={2}
              previousClassName="previous"
              previousLabel="← Prev"
              previousLinkClassName="previous_page"
            />
          </div>
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h1
              className="image-title"
            >
              Member Photographs
            </h1>,
            <Connect(MembersPhotoFilter) />,
            <div
              className="wrap-collapsible"
            >
              <input
                className="toggle-upload"
                id="collapsible-upload"
                type="checkbox"
              />
              <label
                className="lbl-toggle-upload"
                htmlFor="collapsible-upload"
              >
                Uploads
              </label>
              <div
                className="collapsible-content-upload"
              >
                <div
                  className="content-inner"
                >
                  <form
                    className="image-header"
                    onSubmit={[Function]}
                  >
                    <div
                      className="image-header-container"
                    >
                      <label
                        className="upload-file button-small"
                        htmlFor="upload-file"
                      >
                        Get Photo
                      </label>
                      <input
                        accept=".jpg,.jpeg,.png,.bmp,.gif"
                        id="upload-file"
                        name="image"
                        onChange={[Function]}
                        type="file"
                      />
                    </div>
                    <div
                      className="image-header-container"
                    >
                      <input
                        className="upload-title input-box"
                        name="title"
                        onChange={[Function]}
                        placeholder="Title"
                        type="text"
                        value=""
                      />
                    </div>
                    <withStyles(SingleDatePicker)
                      anchorDirection="left"
                      appendToBody={false}
                      block={false}
                      calendarInfoPosition="bottom"
                      customCloseIcon={null}
                      customInputIcon={null}
                      date={"1970-01-01T00:00:00.000Z"}
                      daySize={39}
                      disableScroll={false}
                      disabled={false}
                      displayFormat={[Function]}
                      enableOutsideDays={false}
                      firstDayOfWeek={null}
                      focused={false}
                      hideKeyboardShortcutsPanel={false}
                      horizontalMargin={0}
                      horizontalMonthPadding={13}
                      id="date"
                      initialVisibleMonth={null}
                      inputIconPosition="before"
                      isDayBlocked={[Function]}
                      isDayHighlighted={[Function]}
                      isOutsideRange={[Function]}
                      isRTL={false}
                      keepFocusOnInput={false}
                      keepOpenOnDateSelect={false}
                      monthFormat="MMMM YYYY"
                      navNext={null}
                      navPrev={null}
                      noBorder={false}
                      numberOfMonths={1}
                      onClose={[Function]}
                      onDateChange={[Function]}
                      onFocusChange={[Function]}
                      onNextMonthClick={[Function]}
                      onPrevMonthClick={[Function]}
                      openDirection="down"
                      orientation="horizontal"
                      phrases={
                        Object {
                          "calendarLabel": "Calendar",
                          "chooseAvailableDate": [Function],
                          "clearDate": "Clear Date",
                          "closeDatePicker": "Close",
                          "dateIsSelected": [Function],
                          "dateIsUnavailable": [Function],
                          "enterKey": "Enter key",
                          "escape": "Escape key",
                          "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
                          "homeEnd": "Home and end keys",
                          "jumpToNextMonth": "Move forward to switch to the next month.",
                          "jumpToPrevMonth": "Move backward to switch to the previous month.",
                          "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
                          "keyboardShortcuts": "Keyboard Shortcuts",
                          "leftArrowRightArrow": "Right and left arrow keys",
                          "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
                          "moveFocusByOneMonth": "Switch months.",
                          "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
                          "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
                          "openThisPanel": "Open this panel.",
                          "pageUpPageDown": "page up and page down keys",
                          "questionMark": "Question mark",
                          "returnFocusToInput": "Return to the date input field.",
                          "selectFocusedDate": "Select the date in focus.",
                          "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
                          "upArrowDownArrow": "up and down arrow keys",
                        }
                      }
                      placeholder="Event Date"
                      readOnly={false}
                      regular={false}
                      renderCalendarInfo={null}
                      renderDayContents={null}
                      renderMonthElement={null}
                      renderMonthText={null}
                      reopenPickerOnClearDate={false}
                      required={false}
                      screenReaderInputMessage=""
                      showClearDate={false}
                      showDefaultInputIcon={false}
                      small={false}
                      verticalHeight={null}
                      verticalSpacing={22}
                      weekDayFormat="dd"
                      withFullScreenPortal={false}
                      withPortal={false}
                    />
                    <div
                      className="image-header-container"
                    >
                      <textarea
                        className="upload-text input-box"
                        col="2"
                        name="description"
                        onChange={[Function]}
                        placeholder="Enter Description"
                        rows="21"
                        type="text"
                        value=""
                      />
                    </div>
                    <div
                      className="button-end-container"
                    >
                      <div
                        className="image-header-container"
                      >
                        <input
                          className="button-small"
                          name="submit"
                          type="submit"
                          value="Upload Photo"
                        />
                      </div>
                    </div>
                  </form>
                </div>
              </div>
              <div
                className="image-container"
              >
                <MemberPhotoItem
                  date={0}
                  description="Kendo Photo Details"
                  filename="image-1543168184113.png"
                  onUploadDelete={[Function]}
                  title="Title1"
                />
                <MemberPhotoItem
                  date={-345600000}
                  description="More Details"
                  filename="image-0000000000.png"
                  onUploadDelete={[Function]}
                  title="Title2"
                />
                <MemberPhotoItem
                  date={126234000000}
                  description="Extra Details"
                  filename="image-3333333333.png"
                  onUploadDelete={[Function]}
                  title="Title3"
                />
              </div>
              <PaginationBoxView
                activeClassName="active"
                breakLabel={
                  <span
                    className="gap"
                  >
                    ...
                  </span>
                }
                containerClassName="pagination"
                disableInitialCallback={false}
                disabledClassName="disabled"
                forcePage={0}
                initialPage={0}
                marginPagesDisplayed={3}
                nextClassName="next"
                nextLabel="Next →"
                nextLinkClassName="next_page"
                onPageChange={[Function]}
                pageCount={1}
                pageRangeDisplayed={2}
                previousClassName="previous"
                previousLabel="← Prev"
                previousLinkClassName="previous_page"
              />
            </div>,
          ],
          "className": "images-uploads content-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Member Photographs",
              "className": "image-title",
            },
            "ref": null,
            "rendered": "Member Photographs",
            "type": "h1",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <input
                  className="toggle-upload"
                  id="collapsible-upload"
                  type="checkbox"
                />,
                <label
                  className="lbl-toggle-upload"
                  htmlFor="collapsible-upload"
                >
                  Uploads
                </label>,
                <div
                  className="collapsible-content-upload"
                >
                  <div
                    className="content-inner"
                  >
                    <form
                      className="image-header"
                      onSubmit={[Function]}
                    >
                      <div
                        className="image-header-container"
                      >
                        <label
                          className="upload-file button-small"
                          htmlFor="upload-file"
                        >
                          Get Photo
                        </label>
                        <input
                          accept=".jpg,.jpeg,.png,.bmp,.gif"
                          id="upload-file"
                          name="image"
                          onChange={[Function]}
                          type="file"
                        />
                      </div>
                      <div
                        className="image-header-container"
                      >
                        <input
                          className="upload-title input-box"
                          name="title"
                          onChange={[Function]}
                          placeholder="Title"
                          type="text"
                          value=""
                        />
                      </div>
                      <withStyles(SingleDatePicker)
                        anchorDirection="left"
                        appendToBody={false}
                        block={false}
                        calendarInfoPosition="bottom"
                        customCloseIcon={null}
                        customInputIcon={null}
                        date={"1970-01-01T00:00:00.000Z"}
                        daySize={39}
                        disableScroll={false}
                        disabled={false}
                        displayFormat={[Function]}
                        enableOutsideDays={false}
                        firstDayOfWeek={null}
                        focused={false}
                        hideKeyboardShortcutsPanel={false}
                        horizontalMargin={0}
                        horizontalMonthPadding={13}
                        id="date"
                        initialVisibleMonth={null}
                        inputIconPosition="before"
                        isDayBlocked={[Function]}
                        isDayHighlighted={[Function]}
                        isOutsideRange={[Function]}
                        isRTL={false}
                        keepFocusOnInput={false}
                        keepOpenOnDateSelect={false}
                        monthFormat="MMMM YYYY"
                        navNext={null}
                        navPrev={null}
                        noBorder={false}
                        numberOfMonths={1}
                        onClose={[Function]}
                        onDateChange={[Function]}
                        onFocusChange={[Function]}
                        onNextMonthClick={[Function]}
                        onPrevMonthClick={[Function]}
                        openDirection="down"
                        orientation="horizontal"
                        phrases={
                          Object {
                            "calendarLabel": "Calendar",
                            "chooseAvailableDate": [Function],
                            "clearDate": "Clear Date",
                            "closeDatePicker": "Close",
                            "dateIsSelected": [Function],
                            "dateIsUnavailable": [Function],
                            "enterKey": "Enter key",
                            "escape": "Escape key",
                            "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
                            "homeEnd": "Home and end keys",
                            "jumpToNextMonth": "Move forward to switch to the next month.",
                            "jumpToPrevMonth": "Move backward to switch to the previous month.",
                            "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
                            "keyboardShortcuts": "Keyboard Shortcuts",
                            "leftArrowRightArrow": "Right and left arrow keys",
                            "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
                            "moveFocusByOneMonth": "Switch months.",
                            "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
                            "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
                            "openThisPanel": "Open this panel.",
                            "pageUpPageDown": "page up and page down keys",
                            "questionMark": "Question mark",
                            "returnFocusToInput": "Return to the date input field.",
                            "selectFocusedDate": "Select the date in focus.",
                            "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
                            "upArrowDownArrow": "up and down arrow keys",
                          }
                        }
                        placeholder="Event Date"
                        readOnly={false}
                        regular={false}
                        renderCalendarInfo={null}
                        renderDayContents={null}
                        renderMonthElement={null}
                        renderMonthText={null}
                        reopenPickerOnClearDate={false}
                        required={false}
                        screenReaderInputMessage=""
                        showClearDate={false}
                        showDefaultInputIcon={false}
                        small={false}
                        verticalHeight={null}
                        verticalSpacing={22}
                        weekDayFormat="dd"
                        withFullScreenPortal={false}
                        withPortal={false}
                      />
                      <div
                        className="image-header-container"
                      >
                        <textarea
                          className="upload-text input-box"
                          col="2"
                          name="description"
                          onChange={[Function]}
                          placeholder="Enter Description"
                          rows="21"
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="button-end-container"
                      >
                        <div
                          className="image-header-container"
                        >
                          <input
                            className="button-small"
                            name="submit"
                            type="submit"
                            value="Upload Photo"
                          />
                        </div>
                      </div>
                    </form>
                  </div>
                </div>,
                <div
                  className="image-container"
                >
                  <MemberPhotoItem
                    date={0}
                    description="Kendo Photo Details"
                    filename="image-1543168184113.png"
                    onUploadDelete={[Function]}
                    title="Title1"
                  />
                  <MemberPhotoItem
                    date={-345600000}
                    description="More Details"
                    filename="image-0000000000.png"
                    onUploadDelete={[Function]}
                    title="Title2"
                  />
                  <MemberPhotoItem
                    date={126234000000}
                    description="Extra Details"
                    filename="image-3333333333.png"
                    onUploadDelete={[Function]}
                    title="Title3"
                  />
                </div>,
                <PaginationBoxView
                  activeClassName="active"
                  breakLabel={
                    <span
                      className="gap"
                    >
                      ...
                    </span>
                  }
                  containerClassName="pagination"
                  disableInitialCallback={false}
                  disabledClassName="disabled"
                  forcePage={0}
                  initialPage={0}
                  marginPagesDisplayed={3}
                  nextClassName="next"
                  nextLabel="Next →"
                  nextLinkClassName="next_page"
                  onPageChange={[Function]}
                  pageCount={1}
                  pageRangeDisplayed={2}
                  previousClassName="previous"
                  previousLabel="← Prev"
                  previousLinkClassName="previous_page"
                />,
              ],
              "className": "wrap-collapsible",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "toggle-upload",
                  "id": "collapsible-upload",
                  "type": "checkbox",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Uploads",
                  "className": "lbl-toggle-upload",
                  "htmlFor": "collapsible-upload",
                },
                "ref": null,
                "rendered": "Uploads",
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <div
                    className="content-inner"
                  >
                    <form
                      className="image-header"
                      onSubmit={[Function]}
                    >
                      <div
                        className="image-header-container"
                      >
                        <label
                          className="upload-file button-small"
                          htmlFor="upload-file"
                        >
                          Get Photo
                        </label>
                        <input
                          accept=".jpg,.jpeg,.png,.bmp,.gif"
                          id="upload-file"
                          name="image"
                          onChange={[Function]}
                          type="file"
                        />
                      </div>
                      <div
                        className="image-header-container"
                      >
                        <input
                          className="upload-title input-box"
                          name="title"
                          onChange={[Function]}
                          placeholder="Title"
                          type="text"
                          value=""
                        />
                      </div>
                      <withStyles(SingleDatePicker)
                        anchorDirection="left"
                        appendToBody={false}
                        block={false}
                        calendarInfoPosition="bottom"
                        customCloseIcon={null}
                        customInputIcon={null}
                        date={"1970-01-01T00:00:00.000Z"}
                        daySize={39}
                        disableScroll={false}
                        disabled={false}
                        displayFormat={[Function]}
                        enableOutsideDays={false}
                        firstDayOfWeek={null}
                        focused={false}
                        hideKeyboardShortcutsPanel={false}
                        horizontalMargin={0}
                        horizontalMonthPadding={13}
                        id="date"
                        initialVisibleMonth={null}
                        inputIconPosition="before"
                        isDayBlocked={[Function]}
                        isDayHighlighted={[Function]}
                        isOutsideRange={[Function]}
                        isRTL={false}
                        keepFocusOnInput={false}
                        keepOpenOnDateSelect={false}
                        monthFormat="MMMM YYYY"
                        navNext={null}
                        navPrev={null}
                        noBorder={false}
                        numberOfMonths={1}
                        onClose={[Function]}
                        onDateChange={[Function]}
                        onFocusChange={[Function]}
                        onNextMonthClick={[Function]}
                        onPrevMonthClick={[Function]}
                        openDirection="down"
                        orientation="horizontal"
                        phrases={
                          Object {
                            "calendarLabel": "Calendar",
                            "chooseAvailableDate": [Function],
                            "clearDate": "Clear Date",
                            "closeDatePicker": "Close",
                            "dateIsSelected": [Function],
                            "dateIsUnavailable": [Function],
                            "enterKey": "Enter key",
                            "escape": "Escape key",
                            "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
                            "homeEnd": "Home and end keys",
                            "jumpToNextMonth": "Move forward to switch to the next month.",
                            "jumpToPrevMonth": "Move backward to switch to the previous month.",
                            "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
                            "keyboardShortcuts": "Keyboard Shortcuts",
                            "leftArrowRightArrow": "Right and left arrow keys",
                            "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
                            "moveFocusByOneMonth": "Switch months.",
                            "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
                            "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
                            "openThisPanel": "Open this panel.",
                            "pageUpPageDown": "page up and page down keys",
                            "questionMark": "Question mark",
                            "returnFocusToInput": "Return to the date input field.",
                            "selectFocusedDate": "Select the date in focus.",
                            "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
                            "upArrowDownArrow": "up and down arrow keys",
                          }
                        }
                        placeholder="Event Date"
                        readOnly={false}
                        regular={false}
                        renderCalendarInfo={null}
                        renderDayContents={null}
                        renderMonthElement={null}
                        renderMonthText={null}
                        reopenPickerOnClearDate={false}
                        required={false}
                        screenReaderInputMessage=""
                        showClearDate={false}
                        showDefaultInputIcon={false}
                        small={false}
                        verticalHeight={null}
                        verticalSpacing={22}
                        weekDayFormat="dd"
                        withFullScreenPortal={false}
                        withPortal={false}
                      />
                      <div
                        className="image-header-container"
                      >
                        <textarea
                          className="upload-text input-box"
                          col="2"
                          name="description"
                          onChange={[Function]}
                          placeholder="Enter Description"
                          rows="21"
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="button-end-container"
                      >
                        <div
                          className="image-header-container"
                        >
                          <input
                            className="button-small"
                            name="submit"
                            type="submit"
                            value="Upload Photo"
                          />
                        </div>
                      </div>
                    </form>
                  </div>,
                  "className": "collapsible-content-upload",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <form
                      className="image-header"
                      onSubmit={[Function]}
                    >
                      <div
                        className="image-header-container"
                      >
                        <label
                          className="upload-file button-small"
                          htmlFor="upload-file"
                        >
                          Get Photo
                        </label>
                        <input
                          accept=".jpg,.jpeg,.png,.bmp,.gif"
                          id="upload-file"
                          name="image"
                          onChange={[Function]}
                          type="file"
                        />
                      </div>
                      <div
                        className="image-header-container"
                      >
                        <input
                          className="upload-title input-box"
                          name="title"
                          onChange={[Function]}
                          placeholder="Title"
                          type="text"
                          value=""
                        />
                      </div>
                      <withStyles(SingleDatePicker)
                        anchorDirection="left"
                        appendToBody={false}
                        block={false}
                        calendarInfoPosition="bottom"
                        customCloseIcon={null}
                        customInputIcon={null}
                        date={"1970-01-01T00:00:00.000Z"}
                        daySize={39}
                        disableScroll={false}
                        disabled={false}
                        displayFormat={[Function]}
                        enableOutsideDays={false}
                        firstDayOfWeek={null}
                        focused={false}
                        hideKeyboardShortcutsPanel={false}
                        horizontalMargin={0}
                        horizontalMonthPadding={13}
                        id="date"
                        initialVisibleMonth={null}
                        inputIconPosition="before"
                        isDayBlocked={[Function]}
                        isDayHighlighted={[Function]}
                        isOutsideRange={[Function]}
                        isRTL={false}
                        keepFocusOnInput={false}
                        keepOpenOnDateSelect={false}
                        monthFormat="MMMM YYYY"
                        navNext={null}
                        navPrev={null}
                        noBorder={false}
                        numberOfMonths={1}
                        onClose={[Function]}
                        onDateChange={[Function]}
                        onFocusChange={[Function]}
                        onNextMonthClick={[Function]}
                        onPrevMonthClick={[Function]}
                        openDirection="down"
                        orientation="horizontal"
                        phrases={
                          Object {
                            "calendarLabel": "Calendar",
                            "chooseAvailableDate": [Function],
                            "clearDate": "Clear Date",
                            "closeDatePicker": "Close",
                            "dateIsSelected": [Function],
                            "dateIsUnavailable": [Function],
                            "enterKey": "Enter key",
                            "escape": "Escape key",
                            "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
                            "homeEnd": "Home and end keys",
                            "jumpToNextMonth": "Move forward to switch to the next month.",
                            "jumpToPrevMonth": "Move backward to switch to the previous month.",
                            "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
                            "keyboardShortcuts": "Keyboard Shortcuts",
                            "leftArrowRightArrow": "Right and left arrow keys",
                            "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
                            "moveFocusByOneMonth": "Switch months.",
                            "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
                            "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
                            "openThisPanel": "Open this panel.",
                            "pageUpPageDown": "page up and page down keys",
                            "questionMark": "Question mark",
                            "returnFocusToInput": "Return to the date input field.",
                            "selectFocusedDate": "Select the date in focus.",
                            "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
                            "upArrowDownArrow": "up and down arrow keys",
                          }
                        }
                        placeholder="Event Date"
                        readOnly={false}
                        regular={false}
                        renderCalendarInfo={null}
                        renderDayContents={null}
                        renderMonthElement={null}
                        renderMonthText={null}
                        reopenPickerOnClearDate={false}
                        required={false}
                        screenReaderInputMessage=""
                        showClearDate={false}
                        showDefaultInputIcon={false}
                        small={false}
                        verticalHeight={null}
                        verticalSpacing={22}
                        weekDayFormat="dd"
                        withFullScreenPortal={false}
                        withPortal={false}
                      />
                      <div
                        className="image-header-container"
                      >
                        <textarea
                          className="upload-text input-box"
                          col="2"
                          name="description"
                          onChange={[Function]}
                          placeholder="Enter Description"
                          rows="21"
                          type="text"
                          value=""
                        />
                      </div>
                      <div
                        className="button-end-container"
                      >
                        <div
                          className="image-header-container"
                        >
                          <input
                            className="button-small"
                            name="submit"
                            type="submit"
                            value="Upload Photo"
                          />
                        </div>
                      </div>
                    </form>,
                    "className": "content-inner",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        <div
                          className="image-header-container"
                        >
                          <label
                            className="upload-file button-small"
                            htmlFor="upload-file"
                          >
                            Get Photo
                          </label>
                          <input
                            accept=".jpg,.jpeg,.png,.bmp,.gif"
                            id="upload-file"
                            name="image"
                            onChange={[Function]}
                            type="file"
                          />
                        </div>,
                        <div
                          className="image-header-container"
                        >
                          <input
                            className="upload-title input-box"
                            name="title"
                            onChange={[Function]}
                            placeholder="Title"
                            type="text"
                            value=""
                          />
                        </div>,
                        <withStyles(SingleDatePicker)
                          anchorDirection="left"
                          appendToBody={false}
                          block={false}
                          calendarInfoPosition="bottom"
                          customCloseIcon={null}
                          customInputIcon={null}
                          date={"1970-01-01T00:00:00.000Z"}
                          daySize={39}
                          disableScroll={false}
                          disabled={false}
                          displayFormat={[Function]}
                          enableOutsideDays={false}
                          firstDayOfWeek={null}
                          focused={false}
                          hideKeyboardShortcutsPanel={false}
                          horizontalMargin={0}
                          horizontalMonthPadding={13}
                          id="date"
                          initialVisibleMonth={null}
                          inputIconPosition="before"
                          isDayBlocked={[Function]}
                          isDayHighlighted={[Function]}
                          isOutsideRange={[Function]}
                          isRTL={false}
                          keepFocusOnInput={false}
                          keepOpenOnDateSelect={false}
                          monthFormat="MMMM YYYY"
                          navNext={null}
                          navPrev={null}
                          noBorder={false}
                          numberOfMonths={1}
                          onClose={[Function]}
                          onDateChange={[Function]}
                          onFocusChange={[Function]}
                          onNextMonthClick={[Function]}
                          onPrevMonthClick={[Function]}
                          openDirection="down"
                          orientation="horizontal"
                          phrases={
                            Object {
                              "calendarLabel": "Calendar",
                              "chooseAvailableDate": [Function],
                              "clearDate": "Clear Date",
                              "closeDatePicker": "Close",
                              "dateIsSelected": [Function],
                              "dateIsUnavailable": [Function],
                              "enterKey": "Enter key",
                              "escape": "Escape key",
                              "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
                              "homeEnd": "Home and end keys",
                              "jumpToNextMonth": "Move forward to switch to the next month.",
                              "jumpToPrevMonth": "Move backward to switch to the previous month.",
                              "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
                              "keyboardShortcuts": "Keyboard Shortcuts",
                              "leftArrowRightArrow": "Right and left arrow keys",
                              "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
                              "moveFocusByOneMonth": "Switch months.",
                              "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
                              "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
                              "openThisPanel": "Open this panel.",
                              "pageUpPageDown": "page up and page down keys",
                              "questionMark": "Question mark",
                              "returnFocusToInput": "Return to the date input field.",
                              "selectFocusedDate": "Select the date in focus.",
                              "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
                              "upArrowDownArrow": "up and down arrow keys",
                            }
                          }
                          placeholder="Event Date"
                          readOnly={false}
                          regular={false}
                          renderCalendarInfo={null}
                          renderDayContents={null}
                          renderMonthElement={null}
                          renderMonthText={null}
                          reopenPickerOnClearDate={false}
                          required={false}
                          screenReaderInputMessage=""
                          showClearDate={false}
                          showDefaultInputIcon={false}
                          small={false}
                          verticalHeight={null}
                          verticalSpacing={22}
                          weekDayFormat="dd"
                          withFullScreenPortal={false}
                          withPortal={false}
                        />,
                        <div
                          className="image-header-container"
                        >
                          <textarea
                            className="upload-text input-box"
                            col="2"
                            name="description"
                            onChange={[Function]}
                            placeholder="Enter Description"
                            rows="21"
                            type="text"
                            value=""
                          />
                        </div>,
                        <div
                          className="button-end-container"
                        >
                          <div
                            className="image-header-container"
                          >
                            <input
                              className="button-small"
                              name="submit"
                              type="submit"
                              value="Upload Photo"
                            />
                          </div>
                        </div>,
                      ],
                      "className": "image-header",
                      "onSubmit": [Function],
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <label
                              className="upload-file button-small"
                              htmlFor="upload-file"
                            >
                              Get Photo
                            </label>,
                            <input
                              accept=".jpg,.jpeg,.png,.bmp,.gif"
                              id="upload-file"
                              name="image"
                              onChange={[Function]}
                              type="file"
                            />,
                          ],
                          "className": "image-header-container",
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "children": "Get Photo",
                              "className": "upload-file button-small",
                              "htmlFor": "upload-file",
                            },
                            "ref": null,
                            "rendered": "Get Photo",
                            "type": "label",
                          },
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "accept": ".jpg,.jpeg,.png,.bmp,.gif",
                              "id": "upload-file",
                              "name": "image",
                              "onChange": [Function],
                              "type": "file",
                            },
                            "ref": null,
                            "rendered": null,
                            "type": "input",
                          },
                        ],
                        "type": "div",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": <input
                            className="upload-title input-box"
                            name="title"
                            onChange={[Function]}
                            placeholder="Title"
                            type="text"
                            value=""
                          />,
                          "className": "image-header-container",
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "className": "upload-title input-box",
                            "name": "title",
                            "onChange": [Function],
                            "placeholder": "Title",
                            "type": "text",
                            "value": "",
                          },
                          "ref": null,
                          "rendered": null,
                          "type": "input",
                        },
                        "type": "div",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "class",
                        "props": Object {
                          "anchorDirection": "left",
                          "appendToBody": false,
                          "block": false,
                          "calendarInfoPosition": "bottom",
                          "customCloseIcon": null,
                          "customInputIcon": null,
                          "date": "1970-01-01T00:00:00.000Z",
                          "dayAriaLabelFormat": undefined,
                          "daySize": 39,
                          "disableScroll": false,
                          "disabled": false,
                          "displayFormat": [Function],
                          "enableOutsideDays": false,
                          "firstDayOfWeek": null,
                          "focused": false,
                          "hideKeyboardShortcutsPanel": false,
                          "horizontalMargin": 0,
                          "horizontalMonthPadding": 13,
                          "id": "date",
                          "initialVisibleMonth": null,
                          "inputIconPosition": "before",
                          "isDayBlocked": [Function],
                          "isDayHighlighted": [Function],
                          "isOutsideRange": [Function],
                          "isRTL": false,
                          "keepFocusOnInput": false,
                          "keepOpenOnDateSelect": false,
                          "monthFormat": "MMMM YYYY",
                          "navNext": null,
                          "navPrev": null,
                          "noBorder": false,
                          "numberOfMonths": 1,
                          "onClose": [Function],
                          "onDateChange": [Function],
                          "onFocusChange": [Function],
                          "onNextMonthClick": [Function],
                          "onPrevMonthClick": [Function],
                          "openDirection": "down",
                          "orientation": "horizontal",
                          "phrases": Object {
                            "calendarLabel": "Calendar",
                            "chooseAvailableDate": [Function],
                            "clearDate": "Clear Date",
                            "closeDatePicker": "Close",
                            "dateIsSelected": [Function],
                            "dateIsUnavailable": [Function],
                            "enterKey": "Enter key",
                            "escape": "Escape key",
                            "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
                            "homeEnd": "Home and end keys",
                            "jumpToNextMonth": "Move forward to switch to the next month.",
                            "jumpToPrevMonth": "Move backward to switch to the previous month.",
                            "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
                            "keyboardShortcuts": "Keyboard Shortcuts",
                            "leftArrowRightArrow": "Right and left arrow keys",
                            "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
                            "moveFocusByOneMonth": "Switch months.",
                            "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
                            "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
                            "openThisPanel": "Open this panel.",
                            "pageUpPageDown": "page up and page down keys",
                            "questionMark": "Question mark",
                            "returnFocusToInput": "Return to the date input field.",
                            "selectFocusedDate": "Select the date in focus.",
                            "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
                            "upArrowDownArrow": "up and down arrow keys",
                          },
                          "placeholder": "Event Date",
                          "readOnly": false,
                          "regular": false,
                          "renderCalendarDay": undefined,
                          "renderCalendarInfo": null,
                          "renderDayContents": null,
                          "renderMonthElement": null,
                          "renderMonthText": null,
                          "reopenPickerOnClearDate": false,
                          "required": false,
                          "screenReaderInputMessage": "",
                          "showClearDate": false,
                          "showDefaultInputIcon": false,
                          "small": false,
                          "transitionDuration": undefined,
                          "verticalHeight": null,
                          "verticalSpacing": 22,
                          "weekDayFormat": "dd",
                          "withFullScreenPortal": false,
                          "withPortal": false,
                        },
                        "ref": null,
                        "rendered": null,
                        "type": [Function],
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": <textarea
                            className="upload-text input-box"
                            col="2"
                            name="description"
                            onChange={[Function]}
                            placeholder="Enter Description"
                            rows="21"
                            type="text"
                            value=""
                          />,
                          "className": "image-header-container",
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "className": "upload-text input-box",
                            "col": "2",
                            "name": "description",
                            "onChange": [Function],
                            "placeholder": "Enter Description",
                            "rows": "21",
                            "type": "text",
                            "value": "",
                          },
                          "ref": null,
                          "rendered": null,
                          "type": "textarea",
                        },
                        "type": "div",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": <div
                            className="image-header-container"
                          >
                            <input
                              className="button-small"
                              name="submit"
                              type="submit"
                              value="Upload Photo"
                            />
                          </div>,
                          "className": "button-end-container",
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "children": <input
                              className="button-small"
                              name="submit"
                              type="submit"
                              value="Upload Photo"
                            />,
                            "className": "image-header-container",
                          },
                          "ref": null,
                          "rendered": Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "className": "button-small",
                              "name": "submit",
                              "type": "submit",
                              "value": "Upload Photo",
                            },
                            "ref": null,
                            "rendered": null,
                            "type": "input",
                          },
                          "type": "div",
                        },
                        "type": "div",
                      },
                    ],
                    "type": "form",
                  },
                  "type": "div",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <MemberPhotoItem
                      date={0}
                      description="Kendo Photo Details"
                      filename="image-1543168184113.png"
                      onUploadDelete={[Function]}
                      title="Title1"
                    />,
                    <MemberPhotoItem
                      date={-345600000}
                      description="More Details"
                      filename="image-0000000000.png"
                      onUploadDelete={[Function]}
                      title="Title2"
                    />,
                    <MemberPhotoItem
                      date={126234000000}
                      description="Extra Details"
                      filename="image-3333333333.png"
                      onUploadDelete={[Function]}
                      title="Title3"
                    />,
                  ],
                  "className": "image-container",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": "5bfed7528032901512c0f933",
                    "nodeType": "class",
                    "props": Object {
                      "date": 0,
                      "description": "Kendo Photo Details",
                      "eventDate": undefined,
                      "filename": "image-1543168184113.png",
                      "onUploadDelete": [Function],
                      "title": "Title1",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": "5bfed7528036661512c0f933",
                    "nodeType": "class",
                    "props": Object {
                      "date": -345600000,
                      "description": "More Details",
                      "eventDate": undefined,
                      "filename": "image-0000000000.png",
                      "onUploadDelete": [Function],
                      "title": "Title2",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": "5bfed7528032901512c05rtd",
                    "nodeType": "class",
                    "props": Object {
                      "date": 126234000000,
                      "description": "Extra Details",
                      "eventDate": undefined,
                      "filename": "image-3333333333.png",
                      "onUploadDelete": [Function],
                      "title": "Title3",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "activeClassName": "active",
                  "breakLabel": <span
                    className="gap"
                  >
                    ...
                  </span>,
                  "containerClassName": "pagination",
                  "disableInitialCallback": false,
                  "disabledClassName": "disabled",
                  "forcePage": 0,
                  "initialPage": 0,
                  "marginPagesDisplayed": 3,
                  "nextClassName": "next",
                  "nextLabel": "Next →",
                  "nextLinkClassName": "next_page",
                  "onPageChange": [Function],
                  "pageCount": 1,
                  "pageRangeDisplayed": 2,
                  "previousClassName": "previous",
                  "previousLabel": "← Prev",
                  "previousLinkClassName": "previous_page",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
